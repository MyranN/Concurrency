This framework is designed to solve problems that can be broken into smaller tasks using
the divide and conquer technique. Inside a task, you check the size of the problem you want
to resolve and, if it's bigger than an established size, you divide it in smaller tasks that are
executed using the framework. If the size of the problem is smaller than the established size,
you solve the problem directly in the task and then, optionally, it returns a result. 

There is no formula to determine the reference size of a problem that determines if a task
is subdivided or not, depending on its characteristics. You can use the number of elements
to process in the task and an estimation of the execution time to determine the reference
size. Test different reference sizes to choose the best one to your problem. You can consider
ForkJoinPool as a special kind of Executor.

The framework is based on the following two operations:
 -> The fork operation: When you divide a task into smaller tasks and execute them
    using the framework
 -> The join operation: When a task waits for the finalization of the tasks it has created

The main difference between the Fork/Join and the Executor frameworks is the work-stealing
algorithm. Unlike the Executor framework, when a task is waiting for the finalization of the
subtasks it has created using the join operation, the thread that is executing that task (called
worker thread) looks for other tasks that have not been executed yet and begins its execution.
By this way, the threads take full advantage of their running time, thereby improving the
performance of the application.

To achieve this goal, the tasks executed by the Fork/Join framework have the
following limitations:
 -> Tasks can only use the fork() and join() operations as synchronization
    mechanisms. If they use other synchronization mechanisms, the worker threads
    can't execute other tasks when they are in the synchronization operation. For
    example, if you put a task to sleep in the Fork/Join framework, the worker thread
    that is executing that task won't execute another one during the sleeping time.
 -> Tasks should not perform I/O operations, such as read or write data in a file.
 -> Tasks can't throw checked exceptions. It has to include the code necessary
    to process them.

The core of the Fork/Join framework is formed by the following two classes:
 -> ForkJoinPool: It implements the ExecutorService interface and the workstealing
    algorithm. It manages the worker threads and offers information about the
    status of the tasks and their execution.
 -> ForkJoinTask: It's the base class of the tasks that will execute in ForkJoinPool.
    It provides the mechanisms to execute the fork() and join() operations inside
    a task and the methods to control the status of the tasks. Usually, to implement
    your Fork/Join tasks, you will implement a subclass of two subclasses of this class:
    RecursiveAction for tasks with no return result and RecursiveTask for tasks
    that return one.